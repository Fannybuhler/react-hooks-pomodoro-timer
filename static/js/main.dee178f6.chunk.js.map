{"version":3,"sources":["components/Break.js","components/Session.js","components/TimeLeft.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Break","breakLength","decrementBreakLengthByOneMinute","incrementBreakLengthByOneMinute","breakLengthInMinutes","moment","duration","minutes","id","onClick","Session","sessionLength","decrementSessionLengthByOneMinute","incrementSessionLengthByOneMinute","sessionLengthInMinutes","momentDurationFormatSetup","TimeLeft","handleStartStopClick","startStopButtonLabel","timeLeft","timerLabel","formattedTimeLeft","format","trim","App","useState","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setSessionLength","setBreakLength","setTimeLeft","useEffect","isStarted","className","newBreakLength","clearInterval","newIntervalId","setInterval","prevTimeLeft","newSessionLength","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dee178f6.chunk.js","sourcesContent":["import moment from \"moment\";\nimport React from \"react\";\n\nconst Break = ({\n    breakLength,\n    decrementBreakLengthByOneMinute,\n    incrementBreakLengthByOneMinute,\n}) => {\n    const breakLengthInMinutes = moment.duration(breakLength, \"s\").minutes();\n    return (\n        <div>\n            <p id=\"break-label\">Break</p>\n            <p id=\"break-length\">{breakLengthInMinutes}</p>\n            <button\n                id=\"break-decrement\"\n                onClick={decrementBreakLengthByOneMinute}\n            >\n                -\n            </button>\n            <button\n                id=\"break-increment\"\n                onClick={incrementBreakLengthByOneMinute}\n            >\n                +\n            </button>\n        </div>\n    );\n};\n\nexport default Break;\n","import moment from 'moment';\nimport React from 'react';\n\nconst Session = ({\n  sessionLength,\n  decrementSessionLengthByOneMinute,\n  incrementSessionLengthByOneMinute,\n}) => {\n  const sessionLengthInMinutes = moment.duration(sessionLength, 's').minutes();\n  return (\n    <div>\n      <p id=\"session-label\">Session</p>\n      <p id=\"session-length\">{sessionLengthInMinutes}</p>\n      <button id=\"session-decrement\" onClick={decrementSessionLengthByOneMinute}>\n        -\n      </button>\n      <button id=\"session-increment\" onClick={incrementSessionLengthByOneMinute}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default Session;","import moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport React from 'react';\n\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({ handleStartStopClick, startStopButtonLabel, timeLeft, timerLabel }) => {\n  const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss', { trim: false });\n  return (\n    <div>\n      <h4 id=\"timer-label\">{timerLabel}</h4>\n      <p id=\"time-left\">{formattedTimeLeft}</p>\n      <button id=\"start_stop\" onClick={handleStartStopClick}>\n        {startStopButtonLabel}\n      </button>\n    </div>\n  );\n};\n\nexport default TimeLeft;","import React, { useState, useEffect } from \"react\";\nimport \"./Style/App.css\";\nimport Break from \"./components/Break\";\nimport Session from \"./components/Session\";\nimport TimeLeft from \"./components/TimeLeft\";\n\nfunction App() {\n    // const audioElement = useRef(null);\n    const [currentSessionType, setCurrentSessionType] = useState(\"Session\"); // 'Session' or 'Break'\n    const [intervalId, setIntervalId] = useState(null);\n    const [sessionLength, setSessionLength] = useState(60 * 25);\n    const [breakLength, setBreakLength] = useState(300);\n    const [timeLeft, setTimeLeft] = useState(sessionLength);\n\n    // change timeLeft whenever sessionLength changes\n    useEffect(() => {\n        setTimeLeft(sessionLength);\n    }, [sessionLength]);\n    \n    useEffect(() => {\n        if(timeLeft === 0) {\n            if (currentSessionType === \"Session\") {\n                setCurrentSessionType(\"Break\");\n                setTimeLeft(breakLength);\n            } else if (currentSessionType === \"Break\") {\n                setCurrentSessionType(\"Session\");\n                setTimeLeft(sessionLength);\n            }\n        };\n    }, [timeLeft, currentSessionType, breakLength, sessionLength]);\n\n    const decrementBreakLengthByOneMinute = () => {\n        const newBreakLength = breakLength - 60;\n\n        if (newBreakLength < 0) {\n            setBreakLength(0);\n        } else {\n            setBreakLength(newBreakLength);\n        }\n    };\n\n    const incrementBreakLengthByOneMinute = () => {\n        setBreakLength(breakLength + 60);\n    };\n\n    const decrementSessionLengthByOneMinute = () => {\n        const newSessionLength = sessionLength - 60;\n\n        if (newSessionLength < 0) {\n            setSessionLength(0);\n        } else {\n            setSessionLength(newSessionLength);\n        }\n    };\n\n    const incrementSessionLengthByOneMinute = () => {\n        setSessionLength(sessionLength + 60);\n    };\n\n    const isStarted = intervalId !== null;\n    const handleStartStopClick = () => {\n        if (isStarted) {\n            clearInterval(intervalId);\n            setIntervalId(null);\n        } else {\n            const newIntervalId = setInterval(() => {\n                setTimeLeft((prevTimeLeft) => {\n                    const newTimeLeft = prevTimeLeft - 1;\n                    if (newTimeLeft >= 0) {\n                        return prevTimeLeft - 1;\n                    }\n                    //audioElement.current.play();\n                });\n            }, 100);\n            setIntervalId(newIntervalId);\n        }\n    };\n\n    const handleResetButtonClick = () => {\n        //audioElement.current.load();\n        clearInterval(intervalId);\n        setIntervalId(null);\n        setCurrentSessionType(\"Session\");\n        setSessionLength(60 * 25);\n        setBreakLength(60 * 5);\n        setTimeLeft(60 * 25);\n    };\n\n    return (\n        <div className=\"App\">\n            <Break\n                breakLength={breakLength}\n                decrementBreakLengthByOneMinute={\n                    decrementBreakLengthByOneMinute\n                }\n                incrementBreakLengthByOneMinute={\n                    incrementBreakLengthByOneMinute\n                }\n            />\n            <TimeLeft\n                handleStartStopClick={handleStartStopClick}\n                timerLabel={currentSessionType}\n                startStopButtonLabel={isStarted ? \"Stop\" : \"Start\"}\n                timeLeft={timeLeft}\n            />\n            <Session\n                sessionLength={sessionLength}\n                decrementSessionLengthByOneMinute={\n                    decrementSessionLengthByOneMinute\n                }\n                incrementSessionLengthByOneMinute={\n                    incrementSessionLengthByOneMinute\n                }\n            />\n            <button id=\"reset\" onClick={handleResetButtonClick}>\n                Reset\n            </button>\n            {/* <audio id=\"beep\" ref={audioElement}>\n                <source\n                    src=\"https://onlineclock.net/audio/options/default.mp3\"\n                    type=\"audio/mpeg\"\n                />\n            </audio> */}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Style/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n"],"sourceRoot":""}